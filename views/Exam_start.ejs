<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Online Exam</title>
    <link rel="stylesheet" href="../../../css_files/exam_css.css">
</head>
<body>
    <div class="exam-container">
        <header>
            <div id="timer">
                <img src="https://img.icons8.com/?size=100&id=43987&format=png&color=000000" alt="Timer Icon">
                <span>00:00</span>
            </div>
            <h1><%= title %></h1>
        </header>
        
        <main>
            <aside class="question-nav">
                <h2>Questions</h2>
                <div class="question-status-container">
                    <% for (let i = 0; i < exam.questions.length; i++) { %>
                        <div class="question-status" id="question-<%= i %>">
                            <%= i + 1 %>
                        </div>
                    <% } %>
                </div>
                <div class="legend">
                    <div class="legend-item"><span class="status-dot red"></span>Not answered</div>
                    <div class="legend-item"><span class="status-dot green"></span>Answered</div>
                    <div class="legend-item"><span class="status-dot grey"></span>Not visited</div>
                </div>
            </aside>
            
            <section class="question-area">
                <div id="question-container">
                    <h2 id="question-text"></h2>
                    <div id="options-container"></div>
                </div>
                <div class="navigation-buttons">
                    <button id="back-button" class="nav-button" disabled>Back<img src="../../../icons/back.png" alt="back icon"></button>
                    <button id="next-button" class="nav-button">Next<img src="../../../icons/next.png" alt="next icon"></button>
                </div>
                <button id="submit-exam" class="submit-button">
                    Submit
                    <img src="../../../icons/exams.png" alt="Submit icon">
                </button>
            </section>
        </main>
    </div>
    <script>
        const examData = <%- JSON.stringify(exam) %>; 
        const studentData = <%- JSON.stringify(student) %>; 
        
        const STORAGE_PREFIX = `exam_${examData.Exam_id}_`;
        
        function getStorageItem(key, defaultValue) {
            try {
                const item = localStorage.getItem(STORAGE_PREFIX + key);
                return item ? JSON.parse(item) : defaultValue;
            } catch (error) {
                console.error('Storage read error', error);
                return defaultValue;
            }
        }
        
        function setStorageItem(key, value) {
            try {
                localStorage.setItem(STORAGE_PREFIX + key, JSON.stringify(value));
            } catch (error) {
                console.error('Storage write error', error);
            }
        }
        
        const timerElement = document.getElementById("timer");
        const questionStatuses = getStorageItem('questionStatuses', 
            new Array(examData.questions.length).fill("none"));
        const studentAnswers = getStorageItem('studentAnswers', 
            new Array(examData.questions.length).fill(null));
        let currentQuestionIndex = getStorageItem('currentQuestionIndex', 0);
        
        // Precise timer recovery
        let totalSeconds;
        const storedTimerData = getStorageItem('timerData', null);
        
        if (storedTimerData) {
            const { startTime, totalExamSeconds } = storedTimerData;
            const elapsedSeconds = Math.floor((Date.now() - startTime) / 1000);
            totalSeconds = Math.max(0, totalExamSeconds - elapsedSeconds);
        } else {
            totalSeconds = examData.timeLimit * 60;
            setStorageItem('timerData', { 
                startTime: Date.now(), 
                totalExamSeconds: totalSeconds 
            });
        }
        
        let timerInterval;
        function startTimer() {
            timerInterval = setInterval(() => {
                if (totalSeconds <= 0) {
                    clearInterval(timerInterval);
                    alert("Time's up!");
                    submitExam();
                } else {
                    const minutes = Math.floor(totalSeconds / 60);
                    const seconds = totalSeconds % 60;
                    timerElement.innerHTML = `
                        <img src="https://img.icons8.com/?size=100&id=43987&format=png&color=000000" alt="Timer Icon">
                        ${minutes}:${seconds < 10 ? '0' : ''}${seconds}
                    `;
                    totalSeconds--;
                }
            }, 1000);
        }
        
        function saveState() {
            setStorageItem('questionStatuses', questionStatuses);
            setStorageItem('studentAnswers', studentAnswers);
            setStorageItem('currentQuestionIndex', currentQuestionIndex);
        }
        
        function updateQuestionStatus(questionIndex, status) {
            const questionBox = document.getElementById(`question-${questionIndex}`);
            questionBox.style.backgroundColor = 
                status === "visited-not-answered" ? "red" :
                status === "visited-answered" ? "green" : 
                "grey";
        }
        
        function updateAllQuestionStatuses() {
            studentAnswers.forEach((answer, index) => {
                // Automatically update status based on whether an answer is selected
                if (answer !== null) {
                    questionStatuses[index] = "visited-answered";
                } else if (questionStatuses[index] !== "none") {
                    questionStatuses[index] = "visited-not-answered";
                }
                updateQuestionStatus(index, questionStatuses[index]);
            });
            saveState();
        }
        
        function displayQuestion(index) {
            const question = examData.questions[index];
            document.getElementById("question-text").innerHTML = question.questionText;
        
            const optionsContainer = document.getElementById("options-container");
            optionsContainer.innerHTML = "";
        
            question.options.forEach((option, i) => {
                const optionElement = document.createElement("div");
                optionElement.innerHTML = `
                    <input type="radio" name="options" id="option-${i}" 
                           value="${option.optionText}" 
                           ${studentAnswers[index] === option.optionText ? 'checked' : ''}>
                    <label for="option-${i}">${option.optionText}</label>
                `;
                
                // Add event listener to update status immediately
                const radioInput = optionElement.querySelector('input');
                radioInput.addEventListener('change', () => {
                    studentAnswers[index] = radioInput.value;
                    updateAllQuestionStatuses();
                });
        
                optionsContainer.appendChild(optionElement);
            });
        
            if (questionStatuses[index] === "none") {
                questionStatuses[index] = "visited-not-answered";
            }
        
            document.getElementById("back-button").disabled = index === 0;
            document.getElementById("next-button").disabled = index === examData.questions.length - 1;
        
            saveState();
            updateAllQuestionStatuses();
        }
        
        document.getElementById("next-button").onclick = function() {
            if (currentQuestionIndex < examData.questions.length - 1) {
                currentQuestionIndex++;
                displayQuestion(currentQuestionIndex);
            }
        };
        
        document.getElementById("back-button").onclick = function() {
            if (currentQuestionIndex > 0) {
                currentQuestionIndex--;
                displayQuestion(currentQuestionIndex);
            }
        };
        
        async function submitExam() {
    const confirmSubmit = confirm("Are you sure you want to submit your exam?");
    if (confirmSubmit) {
        // Clear all exam-related localStorage
        Object.keys(localStorage).forEach(key => {
            if (key.startsWith(STORAGE_PREFIX)) {
                localStorage.removeItem(key);
            }
        });

        const examSubmission = {
            studentId: studentData._id,
            examId: examData.Exam_id,
            answers: studentAnswers,
            timeSpent: {
                min:Math.floor((examData.timeLimit * 60 - totalSeconds)/60),
                sec:Math.floor((examData.timeLimit * 60 - totalSeconds)%60)
            }
        };

        try {
            const response = await fetch('/Exam/submit', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(examSubmission)
            });

            if (response.ok) {
                const data = await response.json();
                alert(data.message);
                if (data.redirect) window.location.href = data.redirect;
            } else {
                const errorData = await response.json();
                alert("Error: " + errorData.message);
            }
        } catch (error) {
            console.error('Submission error:', error);
            alert('Submission failed.');
        }
    }
}

        document.getElementById('submit-exam').addEventListener('click', submitExam);
        
        window.onload = () => {
            displayQuestion(currentQuestionIndex);
            startTimer();
            updateAllQuestionStatuses(); // Initial status update
        };
        </script>
</body>
</html>